{"ast":null,"code":"const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst mongoose = require('mongoose');\n\nconst cors = require('./cors');\n\nconst Dishes = require('../models/dishes');\n\nvar authenticate = require('../authenticate');\n\nconst dishRouter = express.Router();\ndishRouter.use(bodyParser.json());\ndishRouter.route('/').options(cors.corsWithOptions, (req, res) => {\n  res.sendStatus(200);\n}).get(cors.cors, (req, res, next) => {\n  Dishes.find(req.query).then(dishes => {\n    res.statusCode = 200;\n    res.setHeader('Content-type', 'application/json');\n    res.json(dishes);\n  }, err => next(err)).catch(err => next(err));\n}).post(cors.corsWithOptions, authenticate.verifyUser, authenticate.verifyAdmin, (req, res, next) => {\n  Dishes.create(req.body).then(dish => {\n    console.log('Dish created ', dish);\n    res.statusCode = 200;\n    res.setHeader('Content-type', 'application/json');\n    res.json(dish);\n  }, err => next(err)).catch(err => next(err));\n}).put(cors.corsWithOptions, authenticate.verifyUser, authenticate.verifyAdmin, (req, res, next) => {\n  res.statusCode = 403;\n  res.end('PUT operation not supported on /dishes');\n}).delete(cors.corsWithOptions, authenticate.verifyUser, authenticate.verifyAdmin, (req, res, next) => {\n  Dishes.remove({}).then(resp => {\n    res.statusCode = 200;\n    res.setHeader('Content-type', 'application/json');\n    res.json(resp);\n  }, err => next(err)).catch(err => next(err));\n});\ndishRouter.route('/:dishId').options(cors.corsWithOptions, (req, res) => {\n  res.sendStatus(200);\n}).get(cors.cors, (req, res, next) => {\n  Dishes.findById(req.params.dishId).then(dish => {\n    res.statusCode = 200;\n    res.setHeader('Content-type', 'application/json');\n    res.json(dish);\n  }, err => next(err)).catch(err => next(err));\n}).post(cors.corsWithOptions, authenticate.verifyAdmin, (req, res, next) => {\n  res.statusCode = 403;\n  res.end('POST operation not supported on /dishes/' + req.params.dishId);\n}).put(cors.corsWithOptions, authenticate.verifyAdmin, (req, res, next) => {\n  Dishes.findByIdAndUpdate(req.params.dishId, {\n    $set: req.body\n  }, {\n    new: true\n  }).then(dish => {\n    res.statusCode = 200;\n    res.setHeader('Content-type', 'application/json');\n    res.json(dish);\n  }, err => next(err)).catch(err => next(err));\n}).delete(cors.corsWithOptions, authenticate.verifyAdmin, (req, res, next) => {\n  Dishes.findByIdAndRemove(req.params.dishId).then(dish => {\n    res.statusCode = 200;\n    res.setHeader('Content-type', 'application/json');\n    res.json(dish);\n  }, err => next(err)).catch(err => next(err));\n});\nmodule.exports = dishRouter;","map":{"version":3,"sources":["/Users/aniton/Documents/TLDL/src/components/FooterComponent.js"],"names":["express","require","bodyParser","mongoose","cors","Dishes","authenticate","dishRouter","Router","use","json","route","options","corsWithOptions","req","res","sendStatus","get","next","find","query","then","dishes","statusCode","setHeader","err","catch","post","verifyUser","verifyAdmin","create","body","dish","console","log","put","end","delete","remove","resp","findById","params","dishId","findByIdAndUpdate","$set","new","findByIdAndRemove","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst cors = require('./cors');\nconst Dishes = require('../models/dishes');\nvar authenticate = require('../authenticate');\n\nconst dishRouter = express.Router();\n\ndishRouter.use(bodyParser.json());\n\ndishRouter.route('/')\n.options(cors.corsWithOptions, (req, res) => { res.sendStatus(200); })\n  .get(cors.cors, (req,res,next) => {\n        Dishes.find(req.query)\n            .then((dishes) => {\n                res.statusCode = 200;\n                res.setHeader('Content-type', 'application/json');\n                res.json(dishes);\n            }, (err) => next(err))\n            .catch((err) => next(err));\n    })\n    .post(cors.corsWithOptions, authenticate.verifyUser, authenticate.verifyAdmin, (req, res, next) => {\n        Dishes.create(req.body)\n            .then((dish) => {\n                console.log('Dish created ', dish);\n                res.statusCode = 200;\n                res.setHeader('Content-type', 'application/json');\n                res.json(dish);\n            }, (err) => next(err))\n            .catch((err) => next(err));\n    })\n    .put(cors.corsWithOptions, authenticate.verifyUser, authenticate.verifyAdmin, (req, res, next) => {\n        res.statusCode = 403;\n        res.end('PUT operation not supported on /dishes');\n    })\n    .delete(cors.corsWithOptions, authenticate.verifyUser, authenticate.verifyAdmin, (req, res, next) => {\n        Dishes.remove({})\n            .then((resp) => {\n                res.statusCode = 200;\n                res.setHeader('Content-type', 'application/json');\n                res.json(resp);\n            }, (err) => next(err))\n            .catch((err) => next(err));\n    });\n\n\ndishRouter.route('/:dishId')\n.options(cors.corsWithOptions, (req, res) => { res.sendStatus(200); })\n    .get(cors.cors, (req, res, next) => {\n        Dishes.findById(req.params.dishId)\n            .then((dish) => {\n                res.statusCode = 200;\n                res.setHeader('Content-type', 'application/json');\n                res.json(dish);\n            }, (err) => next(err))\n            .catch((err) => next(err));\n    })\n    .post(cors.corsWithOptions, authenticate.verifyAdmin, (req, res, next) => {\n        res.statusCode = 403;\n        res.end('POST operation not supported on /dishes/' + req.params.dishId);\n    })\n    .put(cors.corsWithOptions, authenticate.verifyAdmin, (req, res, next) => {\n        Dishes.findByIdAndUpdate(req.params.dishId, {\n            $set: req.body\n        }, { new: true })\n            .then((dish) => {\n                res.statusCode = 200;\n                res.setHeader('Content-type', 'application/json');\n                res.json(dish);\n            }, (err) => next(err))\n            .catch((err) => next(err));\n    })\n    .delete(cors.corsWithOptions, authenticate.verifyAdmin, (req, res, next) => {\n        Dishes.findByIdAndRemove(req.params.dishId)\n            .then((dish) => {\n                res.statusCode = 200;\n                res.setHeader('Content-type', 'application/json');\n                res.json(dish);\n            }, (err) => next(err))\n            .catch((err) => next(err));\n    });\n\nmodule.exports = dishRouter;\n"]},"metadata":{},"sourceType":"module"}