{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const postComment = (dishId, rating, comment) => dispatch => {\n  const newComment = {\n    dish: dishId,\n    rating: rating,\n    comment: comment\n  };\n  console.log('Comment ', newComment);\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': bearer\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post comments ', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\nexport const postText = text => dispatch => {\n  return fetch(baseUrl + 'text', {\n    method: \"POST\",\n    body: JSON.stringify(text),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    console.log('Text', response);\n    alert('Thank you for your text!\\n' + JSON.stringify(response));\n  }).catch(error => {\n    console.log('Text', error.message);\n    alert('Your text could not be summarized\\nError: ' + error.message);\n  });\n};\nexport const requestLogin = creds => {\n  return {\n    type: ActionTypes.LOGIN_REQUEST,\n    creds\n  };\n};\nexport const receiveLogin = response => {\n  return {\n    type: ActionTypes.LOGIN_SUCCESS,\n    token: response.token\n  };\n};\nexport const loginError = message => {\n  return {\n    type: ActionTypes.LOGIN_FAILURE,\n    message\n  };\n};\nexport const loginUser = creds => dispatch => {\n  // We dispatch requestLogin to kickoff the call to the API\n  dispatch(requestLogin(creds));\n  return fetch(baseUrl + 'users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(creds)\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    if (response.success) {\n      // If login was successful, set the token in local storage\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('creds', JSON.stringify(creds)); // Dispatch the success action\n\n      dispatch(fetchFavorites());\n      dispatch(receiveLogin(response));\n    } else {\n      var error = new Error('Error ' + response.status);\n      error.response = response;\n      throw error;\n    }\n  }).catch(error => dispatch(loginError(error.message)));\n};\nexport const requestLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_REQUEST\n  };\n};\nexport const receiveLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_SUCCESS\n  };\n}; // Logs the user out\n\nexport const logoutUser = () => dispatch => {\n  dispatch(requestLogout());\n  localStorage.removeItem('token');\n  localStorage.removeItem('creds');\n  dispatch(favoritesFailed(\"Error 401: Unauthorized\"));\n  dispatch(receiveLogout());\n};\nexport const postFavorite = dishId => dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'favorites/' + dishId, {\n    method: \"POST\",\n    body: JSON.stringify({\n      \"_id\": dishId\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(favorites => {\n    console.log('Favorite Added', favorites);\n    dispatch(addFavorites(favorites));\n  }).catch(error => dispatch(favoritesFailed(error.message)));\n};\nexport const deleteFavorite = dishId => dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'favorites/' + dishId, {\n    method: \"DELETE\",\n    headers: {\n      'Authorization': bearer\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(favorites => {\n    console.log('Favorite Deleted', favorites);\n    dispatch(addFavorites(favorites));\n  }).catch(error => dispatch(favoritesFailed(error.message)));\n};\nexport const fetchFavorites = () => dispatch => {\n  dispatch(favoritesLoading(true));\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'favorites', {\n    headers: {\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(favorites => dispatch(addFavorites(favorites))).catch(error => dispatch(favoritesFailed(error.message)));\n};\nexport const favoritesLoading = () => ({\n  type: ActionTypes.FAVORITES_LOADING\n});\nexport const favoritesFailed = errmess => ({\n  type: ActionTypes.FAVORITES_FAILED,\n  payload: errmess\n});\nexport const addFavorites = favorites => ({\n  type: ActionTypes.ADD_FAVORITES,\n  payload: favorites\n});","map":{"version":3,"sources":["/Users/aniton/Documents/TLDL/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","postComment","dishId","rating","comment","dispatch","newComment","dish","console","log","bearer","localStorage","getItem","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","addComment","catch","alert","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","type","DISHES_LOADING","DISHES_FAILED","payload","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","postText","text","requestLogin","creds","LOGIN_REQUEST","receiveLogin","LOGIN_SUCCESS","token","loginError","LOGIN_FAILURE","loginUser","success","setItem","fetchFavorites","requestLogout","LOGOUT_REQUEST","receiveLogout","LOGOUT_SUCCESS","logoutUser","removeItem","favoritesFailed","postFavorite","favorites","addFavorites","deleteFavorite","favoritesLoading","FAVORITES_LOADING","FAVORITES_FAILED","ADD_FAVORITES"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\n\nexport const postComment = (dishId, rating, comment) => (dispatch) => {\n\n    const newComment = {\n        dish: dishId,\n        rating: rating,\n        comment: comment\n    }\n    console.log('Comment ', newComment);\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'comments', {\n        method: 'POST',\n        body: JSON.stringify(newComment),\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => {\n        if (response.ok) {\n            return response;\n        }\n        else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n    },\n    error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n    })\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error => { console.log('Post comments ', error.message);\n        alert('Your comment could not be posted\\nError: '+ error.message); })\n}\n\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishes')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(dishes => dispatch(addDishes(dishes)))\n        .catch(error => dispatch(dishesFailed(error.message)));\n}\n\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = (errmess) => ({\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\nexport const fetchComments = () => (dispatch) => {\n    return fetch(baseUrl + 'comments')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(comments => dispatch(addComments(comments)))\n        .catch(error => dispatch(commentsFailed(error.message)));\n}\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\nexport const fetchPromos = () => (dispatch) => {\n    dispatch(promosLoading(true));\n\n    return fetch(baseUrl + 'promotions')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(promos => dispatch(addPromos(promos)))\n        .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\nexport const fetchLeaders = () => (dispatch) => {\n\n    dispatch(leadersLoading());\n\n    return fetch(baseUrl + 'leaders')\n    .then(response => {\n        if (response.ok) {\n            return response;\n        } else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n    .then(response => response.json())\n    .then(leaders => dispatch(addLeaders(leaders)))\n    .catch(error => dispatch(leadersFailed(error.message)));\n}\n\nexport const leadersLoading = () => ({\n    type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = (errmess) => ({\n    type: ActionTypes.LEADERS_FAILED,\n    payload: errmess\n});\n\nexport const addLeaders = (leaders) => ({\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n});\n\nexport const postText = (text) => (dispatch) => {\n\n    return fetch(baseUrl + 'text', {\n        method: \"POST\",\n        body: JSON.stringify(text),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(response => { console.log('Text', response); alert('Thank you for your text!\\n'+JSON.stringify(response)); })\n    .catch(error =>  { console.log('Text', error.message); alert('Your text could not be summarized\\nError: '+error.message); });\n};\n\nexport const requestLogin = (creds) => {\n    return {\n        type: ActionTypes.LOGIN_REQUEST,\n        creds\n    }\n}\n\nexport const receiveLogin = (response) => {\n    return {\n        type: ActionTypes.LOGIN_SUCCESS,\n        token: response.token\n    }\n}\n\nexport const loginError = (message) => {\n    return {\n        type: ActionTypes.LOGIN_FAILURE,\n        message\n    }\n}\n\nexport const loginUser = (creds) => (dispatch) => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds))\n\n    return fetch(baseUrl + 'users/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type':'application/json'\n        },\n        body: JSON.stringify(creds)\n    })\n    .then(response => {\n        if (response.ok) {\n            return response;\n        } else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n        },\n        error => {\n            throw error;\n        })\n    .then(response => response.json())\n    .then(response => {\n        if (response.success) {\n            // If login was successful, set the token in local storage\n            localStorage.setItem('token', response.token);\n            localStorage.setItem('creds', JSON.stringify(creds));\n            // Dispatch the success action\n            dispatch(fetchFavorites());\n            dispatch(receiveLogin(response));\n        }\n        else {\n            var error = new Error('Error ' + response.status);\n            error.response = response;\n            throw error;\n        }\n    })\n    .catch(error => dispatch(loginError(error.message)))\n};\n\nexport const requestLogout = () => {\n    return {\n      type: ActionTypes.LOGOUT_REQUEST\n    }\n}\n\nexport const receiveLogout = () => {\n    return {\n      type: ActionTypes.LOGOUT_SUCCESS\n    }\n}\n\n// Logs the user out\nexport const logoutUser = () => (dispatch) => {\n    dispatch(requestLogout())\n    localStorage.removeItem('token');\n    localStorage.removeItem('creds');\n    dispatch(favoritesFailed(\"Error 401: Unauthorized\"));\n    dispatch(receiveLogout())\n}\n\nexport const postFavorite = (dishId) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'favorites/' + dishId, {\n        method: \"POST\",\n        body: JSON.stringify({\"_id\": dishId}),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': bearer\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(favorites => { console.log('Favorite Added', favorites); dispatch(addFavorites(favorites)); })\n    .catch(error => dispatch(favoritesFailed(error.message)));\n}\n\nexport const deleteFavorite = (dishId) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'favorites/' + dishId, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': bearer\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(favorites => { console.log('Favorite Deleted', favorites); dispatch(addFavorites(favorites)); })\n    .catch(error => dispatch(favoritesFailed(error.message)));\n};\n\nexport const fetchFavorites = () => (dispatch) => {\n    dispatch(favoritesLoading(true));\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'favorites', {\n        headers: {\n            'Authorization': bearer\n        },\n    })\n    .then(response => {\n        if (response.ok) {\n            return response;\n        }\n        else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n    },\n    error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n    })\n    .then(response => response.json())\n    .then(favorites => dispatch(addFavorites(favorites)))\n    .catch(error => dispatch(favoritesFailed(error.message)));\n}\n\nexport const favoritesLoading = () => ({\n    type: ActionTypes.FAVORITES_LOADING\n});\n\nexport const favoritesFailed = (errmess) => ({\n    type: ActionTypes.FAVORITES_FAILED,\n    payload: errmess\n});\n\nexport const addFavorites = (favorites) => ({\n    type: ActionTypes.ADD_FAVORITES,\n    payload: favorites\n});\n"]},"metadata":{},"sourceType":"module"}