{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const postText = text => dispatch => {\n  return fetch(baseUrl + 'text', {\n    method: \"POST\",\n    body: JSON.stringify(text),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    console.log('Text', response);\n    alert('Thank you for your text!\\n' + JSON.stringify(response));\n  }).catch(error => {\n    console.log('Text', error.message);\n    alert('Your text could not be summarized\\nError: ' + error.message);\n  });\n};\nexport const requestLogin = creds => {\n  return {\n    type: ActionTypes.LOGIN_REQUEST,\n    creds\n  };\n};\nexport const receiveLogin = response => {\n  return {\n    type: ActionTypes.LOGIN_SUCCESS,\n    token: response.token\n  };\n};\nexport const loginError = message => {\n  return {\n    type: ActionTypes.LOGIN_FAILURE,\n    message\n  };\n};\nexport const loginUser = creds => dispatch => {\n  // We dispatch requestLogin to kickoff the call to the API\n  dispatch(requestLogin(creds));\n  return fetch(baseUrl + 'users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(creds)\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    if (response.success) {\n      // If login was successful, set the token in local storage\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('creds', JSON.stringify(creds)); // Dispatch the success action\n\n      dispatch(fetchFavorites());\n      dispatch(receiveLogin(response));\n    } else {\n      var error = new Error('Error ' + response.status);\n      error.response = response;\n      throw error;\n    }\n  }).catch(error => dispatch(loginError(error.message)));\n};\nexport const requestLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_REQUEST\n  };\n};\nexport const receiveLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_SUCCESS\n  };\n}; // Logs the user out\n\nexport const logoutUser = () => dispatch => {\n  dispatch(requestLogout());\n  localStorage.removeItem('token');\n  localStorage.removeItem('creds');\n  dispatch(favoritesFailed(\"Error 401: Unauthorized\"));\n  dispatch(receiveLogout());\n};\nexport const postFavorite = dishId => dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'favorites/' + dishId, {\n    method: \"POST\",\n    body: JSON.stringify({\n      \"_id\": dishId\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(favorites => {\n    console.log('Favorite Added', favorites);\n    dispatch(addFavorites(favorites));\n  }).catch(error => dispatch(favoritesFailed(error.message)));\n};\nexport const deleteFavorite = dishId => dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'favorites/' + dishId, {\n    method: \"DELETE\",\n    headers: {\n      'Authorization': bearer\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(favorites => {\n    console.log('Favorite Deleted', favorites);\n    dispatch(addFavorites(favorites));\n  }).catch(error => dispatch(favoritesFailed(error.message)));\n};\nexport const fetchFavorites = () => dispatch => {\n  dispatch(favoritesLoading(true));\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'favorites', {\n    headers: {\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(favorites => dispatch(addFavorites(favorites))).catch(error => dispatch(favoritesFailed(error.message)));\n};\nexport const favoritesLoading = () => ({\n  type: ActionTypes.FAVORITES_LOADING\n});\nexport const favoritesFailed = errmess => ({\n  type: ActionTypes.FAVORITES_FAILED,\n  payload: errmess\n});\nexport const addFavorites = favorites => ({\n  type: ActionTypes.ADD_FAVORITES,\n  payload: favorites\n});","map":{"version":3,"sources":["/Users/aniton/Documents/TLDL/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","postText","text","dispatch","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","console","log","alert","catch","message","requestLogin","creds","type","LOGIN_REQUEST","receiveLogin","LOGIN_SUCCESS","token","loginError","LOGIN_FAILURE","loginUser","success","localStorage","setItem","fetchFavorites","requestLogout","LOGOUT_REQUEST","receiveLogout","LOGOUT_SUCCESS","logoutUser","removeItem","favoritesFailed","postFavorite","dishId","bearer","getItem","favorites","addFavorites","deleteFavorite","favoritesLoading","errmess","FAVORITES_LOADING","FAVORITES_FAILED","payload","ADD_FAVORITES"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\n\n\n\nexport const postText = (text) => (dispatch) => {\n\n    return fetch(baseUrl + 'text', {\n        method: \"POST\",\n        body: JSON.stringify(text),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(response => { console.log('Text', response); alert('Thank you for your text!\\n'+JSON.stringify(response)); })\n    .catch(error =>  { console.log('Text', error.message); alert('Your text could not be summarized\\nError: '+error.message); });\n};\n\nexport const requestLogin = (creds) => {\n    return {\n        type: ActionTypes.LOGIN_REQUEST,\n        creds\n    }\n}\n\nexport const receiveLogin = (response) => {\n    return {\n        type: ActionTypes.LOGIN_SUCCESS,\n        token: response.token\n    }\n}\n\nexport const loginError = (message) => {\n    return {\n        type: ActionTypes.LOGIN_FAILURE,\n        message\n    }\n}\n\nexport const loginUser = (creds) => (dispatch) => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds))\n\n    return fetch(baseUrl + 'users/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type':'application/json'\n        },\n        body: JSON.stringify(creds)\n    })\n    .then(response => {\n        if (response.ok) {\n            return response;\n        } else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n        },\n        error => {\n            throw error;\n        })\n    .then(response => response.json())\n    .then(response => {\n        if (response.success) {\n            // If login was successful, set the token in local storage\n            localStorage.setItem('token', response.token);\n            localStorage.setItem('creds', JSON.stringify(creds));\n            // Dispatch the success action\n            dispatch(fetchFavorites());\n            dispatch(receiveLogin(response));\n        }\n        else {\n            var error = new Error('Error ' + response.status);\n            error.response = response;\n            throw error;\n        }\n    })\n    .catch(error => dispatch(loginError(error.message)))\n};\n\nexport const requestLogout = () => {\n    return {\n      type: ActionTypes.LOGOUT_REQUEST\n    }\n}\n\nexport const receiveLogout = () => {\n    return {\n      type: ActionTypes.LOGOUT_SUCCESS\n    }\n}\n\n// Logs the user out\nexport const logoutUser = () => (dispatch) => {\n    dispatch(requestLogout())\n    localStorage.removeItem('token');\n    localStorage.removeItem('creds');\n    dispatch(favoritesFailed(\"Error 401: Unauthorized\"));\n    dispatch(receiveLogout())\n}\n\nexport const postFavorite = (dishId) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'favorites/' + dishId, {\n        method: \"POST\",\n        body: JSON.stringify({\"_id\": dishId}),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': bearer\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(favorites => { console.log('Favorite Added', favorites); dispatch(addFavorites(favorites)); })\n    .catch(error => dispatch(favoritesFailed(error.message)));\n}\n\nexport const deleteFavorite = (dishId) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'favorites/' + dishId, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': bearer\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(favorites => { console.log('Favorite Deleted', favorites); dispatch(addFavorites(favorites)); })\n    .catch(error => dispatch(favoritesFailed(error.message)));\n};\n\nexport const fetchFavorites = () => (dispatch) => {\n    dispatch(favoritesLoading(true));\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'favorites', {\n        headers: {\n            'Authorization': bearer\n        },\n    })\n    .then(response => {\n        if (response.ok) {\n            return response;\n        }\n        else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n    },\n    error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n    })\n    .then(response => response.json())\n    .then(favorites => dispatch(addFavorites(favorites)))\n    .catch(error => dispatch(favoritesFailed(error.message)));\n}\n\nexport const favoritesLoading = () => ({\n    type: ActionTypes.FAVORITES_LOADING\n});\n\nexport const favoritesFailed = (errmess) => ({\n    type: ActionTypes.FAVORITES_FAILED,\n    payload: errmess\n});\n\nexport const addFavorites = (favorites) => ({\n    type: ActionTypes.ADD_FAVORITES,\n    payload: favorites\n});\n"]},"metadata":{},"sourceType":"module"}